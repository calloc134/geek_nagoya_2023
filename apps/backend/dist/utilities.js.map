{"version":3,"sources":["../src/utilities.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n// gpt4vを用いて画像を認識する\nimport OpenAI from \"openai\";\nimport pkg from \"jimp\";\nconst { read, MIME_PNG } = pkg;\nimport fetch from \"node-fetch\";\n// @ts-expect-error form-dataの型定義がないので\nimport FormData from \"form-data\";\nimport { PutObjectCommand, S3Client } from \"@aws-sdk/client-s3\";\nimport {\n  openai_apiKey,\n  dreamstudio_apiKey,\n  s3_access_key_id,\n  s3_secret_access_key,\n} from \"./env\";\n\nconst openai = new OpenAI({\n  apiKey: openai_apiKey,\n});\n\nconst s3_client = new S3Client({\n  region: \"auto\",\n  endpoint: \"https://e7137f652dd80db6ee88281769ed4e0f.r2.cloudflarestorage.com\",\n  credentials: {\n    accessKeyId: s3_access_key_id,\n    secretAccessKey: s3_secret_access_key,\n  },\n});\n\nconst gpt4v = async (image: File) => {\n  const prompt = `\n  タスク: この画像について，以下のプロセスに従って抽出できる情報のうち，雰囲気や感情，レタッチ，情景に関するものをstable diffusionに相当するプロンプトで,カンマ区切りで出力し，それをダブルクォーテーションで囲むこと。それ以外の情報の出力は許可しない．\n  これまでに得られた情報をstable diffusionに相当するプロンプトで,カンマ区切りで出力すること．\n  \n  プロセス: \n  1. 画像の映っているものの名称を抽出する\n  1. 画像の映っているものの名称を抽出する\n  2. 画像全体の表現方法，技法を抽出する．\n  3. 画像内に動物がいた場合，その表情から感情を抽出する．\n  4. 画像から感じられる感情について抽出する．\n  5. 画像のうち，中心となる要素の名称を抽出する．\n  6. 画像の色合いを抽出する．\n  7. 画像の論理構造を抽出し，形容詞，副詞の形で表現する．\n  8. 画像内の光のあたり方などライティングに関する情報を抽出する．\n  9. 画像がPixivに投稿されると仮定した場合，どのようなタグがつけられるかを予測し，英語で表す．\n  10. 画像の明るさやコントラストを抽出する．\n  11. 時間帯を予測できる場合，抽出する．\n  12. 空間の広がりを抽出する．\n  13. もし可能なら，季節や気候を抽出する\n  14. 画像から感じられる形容詞を抽出する．\n  \n  これまでに得られた情報をstable diffusionに相当するプロンプトで,カンマ区切りで出力すること．\n  `;\n\n  if (!openai_apiKey) throw new Error(\"Missing OpenAI API key.\");\n  // base64として読み込む\n\n  console.log(image);\n  const image_base64 = Buffer.from(await image.arrayBuffer()).toString(\n    \"base64\"\n  );\n\n  try {\n    const result = await openai.chat.completions.create({\n      model: \"gpt-4-vision-preview\",\n      temperature: 0.2,\n      max_tokens: 256,\n      messages: [\n        {\n          role: \"system\",\n          content: prompt,\n        },\n        {\n          role: \"user\",\n          content: [\n            {\n              type: \"image_url\",\n              image_url: {\n                url: `data:image/png;base64,${image_base64}`,\n              },\n            },\n          ],\n        },\n      ],\n    });\n    return result.choices[0].message.content;\n  } catch (e) {\n    console.error(e);\n    throw e;\n  }\n};\n\nconst img2img = async (prompt: string, file: File) => {\n  // ファイルの読み込み\n  const fileArrayBuffer = await file.arrayBuffer();\n\n  // 画像の読み込み\n  const image_original = await read(Buffer.from(fileArrayBuffer));\n\n  // 画像のリサイズ\n  image_original.cover(1024, 1024);\n\n  const engineId = \"stable-diffusion-xl-1024-v1-0\";\n  const apiHost = \"https://api.stability.ai\";\n  const apiKey = dreamstudio_apiKey;\n\n  if (!apiKey) throw new Error(\"Missing Stability API key.\");\n\n  const formData = new FormData();\n  formData.append(\"init_image\", await image_original.getBufferAsync(MIME_PNG));\n  formData.append(\"init_image_mode\", \"IMAGE_STRENGTH\");\n  formData.append(\"image_strength\", 0.2);\n  formData.append(\"text_prompts[0][text]\", prompt);\n  formData.append(\"text_prompts[0][weight]\", 0.7);\n  formData.append(\"cfg_scale\", 9);\n  formData.append(\"samples\", 1);\n  formData.append(\"steps\", 30);\n\n  const response = await fetch(\n    `${apiHost}/v1/generation/${engineId}/image-to-image`,\n    {\n      method: \"POST\",\n      headers: {\n        ...formData.getHeaders(),\n        Accept: \"application/json\",\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: formData,\n    }\n  );\n\n  if (!response.ok) {\n    throw new Error(`Non-200 response: ${await response.text()}`);\n  }\n\n  interface GenerationResponse {\n    artifacts: Array<{\n      base64: string;\n      seed: number;\n      finishReason: string;\n    }>;\n  }\n\n  const responseJSON = (await response.json()) as GenerationResponse;\n\n  return responseJSON.artifacts[0].base64;\n};\n\nconst s3_upload = async (image_base64: string) => {\n  // uuid v4を作成する\n  const filename = `${uuidv4()}.png`;\n  // アップロード\n  await s3_client.send(\n    new PutObjectCommand({\n      Bucket: \"geek-nagoya-2023\",\n      Key: filename,\n      Body: Buffer.from(image_base64, \"base64\"),\n    })\n  );\n\n  return {\n    filename,\n  };\n};\n\nexport { gpt4v, img2img, s3_upload };\n"],"names":["v4","uuidv4","OpenAI","pkg","read","MIME_PNG","fetch","FormData","PutObjectCommand","S3Client","openai_apiKey","dreamstudio_apiKey","s3_access_key_id","s3_secret_access_key","openai","apiKey","s3_client","region","endpoint","credentials","accessKeyId","secretAccessKey","gpt4v","image","prompt","Error","console","log","image_base64","Buffer","from","arrayBuffer","toString","result","chat","completions","create","model","temperature","max_tokens","messages","role","content","type","image_url","url","choices","message","e","error","img2img","file","fileArrayBuffer","image_original","cover","engineId","apiHost","formData","append","getBufferAsync","response","method","headers","getHeaders","Accept","Authorization","body","ok","text","responseJSON","json","artifacts","base64","s3_upload","filename","send","Bucket","Key","Body"],"mappings":"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"}