{"version":3,"sources":["../../../src/lib/generated/resolver-types.ts"],"sourcesContent":["import type { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  File: { input: File; output: File; }\n};\n\nexport type Mutation = {\n  process_image?: Maybe<ProcessResponse>;\n};\n\n\nexport type MutationProcess_ImageArgs = {\n  camera_image?: InputMaybe<Scalars['File']['input']>;\n  original_image?: InputMaybe<Scalars['File']['input']>;\n};\n\nexport type ProcessResponse = {\n  url?: Maybe<Scalars['String']['output']>;\n};\n\nexport type Query = {\n  hello?: Maybe<Hello_Response>;\n};\n\nexport type Hello_Response = {\n  message?: Maybe<Scalars['String']['output']>;\n  url?: Maybe<Scalars['String']['output']>;\n};\n\n\n\nexport type ResolverTypeWrapper<T> = Promise<T> | T;\n\n\nexport type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;\n\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult;\n\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;\n\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\nexport interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;\n  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;\n}\n\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;\n}\n\nexport type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;\n\nexport type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =\n  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;\n\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>;\n\nexport type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;\n\nexport type NextResolverFn<T> = () => Promise<T>;\n\nexport type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (\n  next: NextResolverFn<TResult>,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\n\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = {\n  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;\n  File: ResolverTypeWrapper<Scalars['File']['output']>;\n  Mutation: ResolverTypeWrapper<{}>;\n  ProcessResponse: ResolverTypeWrapper<ProcessResponse>;\n  Query: ResolverTypeWrapper<{}>;\n  String: ResolverTypeWrapper<Scalars['String']['output']>;\n  hello_response: ResolverTypeWrapper<Hello_Response>;\n};\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = {\n  Boolean: Scalars['Boolean']['output'];\n  File: Scalars['File']['output'];\n  Mutation: {};\n  ProcessResponse: ProcessResponse;\n  Query: {};\n  String: Scalars['String']['output'];\n  hello_response: Hello_Response;\n};\n\nexport interface FileScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['File'], any> {\n  name: 'File';\n}\n\nexport type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {\n  process_image?: Resolver<Maybe<ResolversTypes['ProcessResponse']>, ParentType, ContextType, Partial<MutationProcess_ImageArgs>>;\n};\n\nexport type ProcessResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ProcessResponse'] = ResolversParentTypes['ProcessResponse']> = {\n  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {\n  hello?: Resolver<Maybe<ResolversTypes['hello_response']>, ParentType, ContextType>;\n};\n\nexport type Hello_ResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['hello_response'] = ResolversParentTypes['hello_response']> = {\n  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n};\n\nexport type Resolvers<ContextType = any> = {\n  File?: GraphQLScalarType;\n  Mutation?: MutationResolvers<ContextType>;\n  ProcessResponse?: ProcessResponseResolvers<ContextType>;\n  Query?: QueryResolvers<ContextType>;\n  hello_response?: Hello_ResponseResolvers<ContextType>;\n};\n\n"],"names":[],"mappings":"AA2JA,WAME"}